group MatcherGenerator;

/**
 * The main template that generates the Matcher class.
 */
main(matcher) ::= <<
package <matcher.destinationPackage>;

<matcher.imports:writeImport(); separator="\n">

@Generated("com.impressiveinteractive.synapse.processor.BuildMatcherProcessor")
public class <matcher.destinationName><matcher.typedGenerics> extends ChainableMatcher\<<matcher.pojoName><matcher.generics>\> {
    public static <matcher.typedGenerics> <matcher.destinationName><matcher.generics> <matcher.staticMethodName>() {
        return new <matcher.destinationName><matcher.generics>();
    }

    public <matcher.destinationName>() {
        <if(matcher.generics)>super(new TypeToken\<<matcher.pojoName><matcher.generics>\>() {});
        <else>super(<matcher.pojoName>.class);
        <endif>
    }

    @Override
    public \<CM_V\> <matcher.destinationName><matcher.generics> where(SerializableFunction\<<matcher.pojoName><matcher.generics>, CM_V\> valueExtractor, Matcher\<? super CM_V\> matcher) {
        super.where(valueExtractor, matcher);
        return this;
    }

    @Override
    public \<CM_V\> <matcher.destinationName><matcher.generics> where(String description, SerializableFunction\<<matcher.pojoName><matcher.generics>, CM_V\> valueExtractor, Matcher\<? super CM_V\> matcher) {
        super.where(description, valueExtractor, matcher);
        return this;
    }

    @Override
    public \<CM_V1, CM_V2\> <matcher.destinationName><matcher.generics> where(FieldMapper\<<matcher.pojoName><matcher.generics>, CM_V1, CM_V2\> mapper, Matcher\<? super CM_V2\> matcher) {
        super.where(mapper, matcher);
        return this;
    }

    <matcher.getterLikes:writeGetterLike(); separator="\n\n">

    <matcher.utilities:writeUtility(); separator="\n\n">
}
>>

/**
 * Generates a single import line.
 */
writeImport(imp) ::= "import <imp>;"

/**
 * Generates a with* method that uses a getter like method on the destination type.
 */
writeGetterLike(getterLike) ::= <<
public <getterLike.typedGenerics> <matcher.destinationName><matcher.generics> with<getterLike.propertyName>(Matcher\<? super <getterLike.simpleReturnType>\> matcher) {
    <if(getterLike.exceptional)>where((SerializableFunction\<<matcher.pojoName><matcher.generics>, <getterLike.simpleReturnType>\>) (<matcher.pojoName><matcher.generics> destination) -> {
    try {
        return destination.<getterLike.methodName>();
    } catch (RuntimeException e){
        throw e;
    } catch (Exception e) {
        throw new AssertionError("<matcher.pojoName>::<getterLike.methodName> threw a checked exception.", e);
    }
}, matcher);
    <else>where(<matcher.pojoName>::<getterLike.methodName>, matcher);
    <endif>
    return this;
}
>>

/**
 * Generates a with* method that uses a custom name and utility method.
 */
writeUtility(utility) ::= <<
public <matcher.destinationName><matcher.generics> with<utility.propertyName>(Matcher\<? super <utility.simpleReturnType>\> matcher) {
    where("<utility.methodName>", <utility.simpleUtilityType>::<utility.methodName>, matcher);
    return this;
}
>>
