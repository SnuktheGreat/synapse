group MatcherGenerator;

/**
 * The main template that generates the Matcher class.
 */
main(matcher) ::= <<
package <matcher.destinationPackage>;

<matcher.imports:writeImport(); separator="\n">

@Generated("com.impressiveinteractive.synapse.processor.BuildMatcherProcessor")
public class <matcher.destinationName> extends ChainableMatcher\<<matcher.pojoName>\> {
    public static <matcher.destinationName> <matcher.staticMethodName>() {
        return new <matcher.destinationName>();
    }

    public <matcher.destinationName>() {
        super(<matcher.pojoName>.class);
    }

    @Override
    public \<V\> <matcher.destinationName> where(SerializableFunction\<? super <matcher.pojoName>, V\> valueExtractor, Matcher\<? super V\> matcher) {
        super.where(valueExtractor, matcher);
        return this;
    }

    @Override
    public \<V\> <matcher.destinationName> where(String description, SerializableFunction\<? super <matcher.pojoName>, V\> valueExtractor, Matcher\<? super V\> matcher) {
        super.where(description, valueExtractor, matcher);
        return this;
    }

    @Override
    public \<V1, V2\> <matcher.destinationName> where(FieldMapper\<? super <matcher.pojoName>, V1, V2\> mapper, Matcher\<? super V2\> matcher) {
        super.where(mapper, matcher);
        return this;
    }

    <matcher.getterLikes:writeGetterLike(); separator="\n\n">

    <matcher.utilities:writeUtility(); separator="\n\n">
}
>>

/**
 * Generates a single import line.
 */
writeImport(imp) ::= "import <imp>;"

/**
 * Generates a with* method that uses a getter like method on the destination type.
 */
writeGetterLike(getterLike) ::= <<
public <getterLike.destinationName> with<getterLike.propertyName>(Matcher\<? super <getterLike.simpleReturnType>\> matcher) {
    where(<getterLike.pojoName>::<getterLike.methodName>, matcher);
    return this;
}
>>

/**
 * Generates a with* method that uses a custom name and utility method.
 */
writeUtility(utility) ::= <<
public <utility.destinationName> with<utility.propertyName>(Matcher\<? super <utility.simpleReturnType>\> matcher) {
    where("<utility.methodName>", <utility.simpleUtilityType>::<utility.methodName>, matcher);
    return this;
}
>>
